
public class Solution {
    	public static LinkedListNode<Integer> mergeTwoList(LinkedListNode<Integer> head1, LinkedListNode<Integer> head2) {
		
        LinkedListNode<Integer> temp1=head1, temp2=head2;
        LinkedListNode<Integer> tail;
        LinkedListNode<Integer> head;
        if(temp1.data < temp2.data)
        {
        head=temp1;
            tail=temp1;
            temp1=temp1.next;
        }
        else
        {
             head=temp2;
            tail=temp2;
            temp2=temp2.next;
        }
        while(temp1!=null && temp2!=null)
        {
           // System.out.print("I am here   " );
            
            if(temp1.data < temp2.data)
            {
                     tail.next=temp1;
                    tail=temp1;
                temp1=temp1.next;
                    
                }
            else
            {
                tail.next=temp2;
                tail=temp2;
                temp2=temp2.next;
            
                
            }
            }
        // System.out.print("I am here");
          while(temp1!=null)
        {
            tail.next=temp1;
            tail=tail.next;
            temp1=temp1.next;
        }
                
        while(temp2!=null)
        {
            tail.next=temp2;
           tail=tail.next;
            temp2=temp2.next;
        }
/
        return head;
		
	}

	public static LinkedListNode<Integer> mergeSort(LinkedListNode<Integer> head) {
		// write your code here
        if(head==null || head.next==null)
            
        {
            return head;
        }
        LinkedListNode<Integer> slow=head;
        LinkedListNode<Integer> fast=head;
        while(fast.next!=null && fast.next.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }
        LinkedListNode<Integer> mid= slow;
        LinkedListNode<Integer> newHead=slow.next;
        slow.next=null;
        LinkedListNode<Integer> list1=mergeSort(head);
       LinkedListNode<Integer> list2= mergeSort(newHead);
        LinkedListNode<Integer> finalHead=mergeTwoList(list1, list2);
        
        return finalHead;
        

	}

}

